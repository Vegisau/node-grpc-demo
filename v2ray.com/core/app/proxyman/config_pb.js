/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var v2ray_com_core_common_net_address_pb = require('../../../../v2ray.com/core/common/net/address_pb.js');
var v2ray_com_core_common_net_port_pb = require('../../../../v2ray.com/core/common/net/port_pb.js');
var v2ray_com_core_transport_internet_config_pb = require('../../../../v2ray.com/core/transport/internet/config_pb.js');
var v2ray_com_core_common_serial_typed_message_pb = require('../../../../v2ray.com/core/common/serial/typed_message_pb.js');
goog.exportSymbol('proto.v2ray.core.app.proxyman.AllocationStrategy', null, global);
goog.exportSymbol('proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency', null, global);
goog.exportSymbol('proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh', null, global);
goog.exportSymbol('proto.v2ray.core.app.proxyman.AllocationStrategy.Type', null, global);
goog.exportSymbol('proto.v2ray.core.app.proxyman.InboundConfig', null, global);
goog.exportSymbol('proto.v2ray.core.app.proxyman.InboundHandlerConfig', null, global);
goog.exportSymbol('proto.v2ray.core.app.proxyman.KnownProtocols', null, global);
goog.exportSymbol('proto.v2ray.core.app.proxyman.MultiplexingConfig', null, global);
goog.exportSymbol('proto.v2ray.core.app.proxyman.OutboundConfig', null, global);
goog.exportSymbol('proto.v2ray.core.app.proxyman.ReceiverConfig', null, global);
goog.exportSymbol('proto.v2ray.core.app.proxyman.SenderConfig', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.app.proxyman.InboundConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v2ray.core.app.proxyman.InboundConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.app.proxyman.InboundConfig.displayName = 'proto.v2ray.core.app.proxyman.InboundConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.app.proxyman.InboundConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.app.proxyman.InboundConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.app.proxyman.InboundConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.InboundConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.app.proxyman.InboundConfig}
 */
proto.v2ray.core.app.proxyman.InboundConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.app.proxyman.InboundConfig;
  return proto.v2ray.core.app.proxyman.InboundConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.app.proxyman.InboundConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.app.proxyman.InboundConfig}
 */
proto.v2ray.core.app.proxyman.InboundConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.app.proxyman.InboundConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.app.proxyman.InboundConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.app.proxyman.InboundConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.InboundConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.app.proxyman.AllocationStrategy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v2ray.core.app.proxyman.AllocationStrategy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.app.proxyman.AllocationStrategy.displayName = 'proto.v2ray.core.app.proxyman.AllocationStrategy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.app.proxyman.AllocationStrategy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.app.proxyman.AllocationStrategy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    concurrency: (f = msg.getConcurrency()) && proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.toObject(includeInstance, f),
    refresh: (f = msg.getRefresh()) && proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.app.proxyman.AllocationStrategy}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.app.proxyman.AllocationStrategy;
  return proto.v2ray.core.app.proxyman.AllocationStrategy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.app.proxyman.AllocationStrategy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.app.proxyman.AllocationStrategy}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.v2ray.core.app.proxyman.AllocationStrategy.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency;
      reader.readMessage(value,proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.deserializeBinaryFromReader);
      msg.setConcurrency(value);
      break;
    case 3:
      var value = new proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh;
      reader.readMessage(value,proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.deserializeBinaryFromReader);
      msg.setRefresh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.app.proxyman.AllocationStrategy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.app.proxyman.AllocationStrategy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConcurrency();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.serializeBinaryToWriter
    );
  }
  f = message.getRefresh();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.Type = {
  ALWAYS: 0,
  RANDOM: 1,
  EXTERNAL: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.displayName = 'proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency;
  return proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 value = 1;
 * @return {number}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.displayName = 'proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh;
  return proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 value = 1;
 * @return {number}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Type type = 1;
 * @return {!proto.v2ray.core.app.proxyman.AllocationStrategy.Type}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.getType = function() {
  return /** @type {!proto.v2ray.core.app.proxyman.AllocationStrategy.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.v2ray.core.app.proxyman.AllocationStrategy.Type} value */
proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional AllocationStrategyConcurrency concurrency = 2;
 * @return {?proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.getConcurrency = function() {
  return /** @type{?proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency} */ (
    jspb.Message.getWrapperField(this, proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency, 2));
};


/** @param {?proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency|undefined} value */
proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.setConcurrency = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.clearConcurrency = function() {
  this.setConcurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.hasConcurrency = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AllocationStrategyRefresh refresh = 3;
 * @return {?proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.getRefresh = function() {
  return /** @type{?proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh} */ (
    jspb.Message.getWrapperField(this, proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh, 3));
};


/** @param {?proto.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh|undefined} value */
proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.setRefresh = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.clearRefresh = function() {
  this.setRefresh(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.AllocationStrategy.prototype.hasRefresh = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.app.proxyman.ReceiverConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v2ray.core.app.proxyman.ReceiverConfig.repeatedFields_, null);
};
goog.inherits(proto.v2ray.core.app.proxyman.ReceiverConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.app.proxyman.ReceiverConfig.displayName = 'proto.v2ray.core.app.proxyman.ReceiverConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.app.proxyman.ReceiverConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.app.proxyman.ReceiverConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    portRange: (f = msg.getPortRange()) && v2ray_com_core_common_net_port_pb.PortRange.toObject(includeInstance, f),
    listen: (f = msg.getListen()) && v2ray_com_core_common_net_address_pb.IPOrDomain.toObject(includeInstance, f),
    allocationStrategy: (f = msg.getAllocationStrategy()) && proto.v2ray.core.app.proxyman.AllocationStrategy.toObject(includeInstance, f),
    streamSettings: (f = msg.getStreamSettings()) && v2ray_com_core_transport_internet_config_pb.StreamConfig.toObject(includeInstance, f),
    receiveOriginalDestination: jspb.Message.getFieldWithDefault(msg, 5, false),
    domainOverrideList: jspb.Message.getRepeatedField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.app.proxyman.ReceiverConfig}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.app.proxyman.ReceiverConfig;
  return proto.v2ray.core.app.proxyman.ReceiverConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.app.proxyman.ReceiverConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.app.proxyman.ReceiverConfig}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new v2ray_com_core_common_net_port_pb.PortRange;
      reader.readMessage(value,v2ray_com_core_common_net_port_pb.PortRange.deserializeBinaryFromReader);
      msg.setPortRange(value);
      break;
    case 2:
      var value = new v2ray_com_core_common_net_address_pb.IPOrDomain;
      reader.readMessage(value,v2ray_com_core_common_net_address_pb.IPOrDomain.deserializeBinaryFromReader);
      msg.setListen(value);
      break;
    case 3:
      var value = new proto.v2ray.core.app.proxyman.AllocationStrategy;
      reader.readMessage(value,proto.v2ray.core.app.proxyman.AllocationStrategy.deserializeBinaryFromReader);
      msg.setAllocationStrategy(value);
      break;
    case 4:
      var value = new v2ray_com_core_transport_internet_config_pb.StreamConfig;
      reader.readMessage(value,v2ray_com_core_transport_internet_config_pb.StreamConfig.deserializeBinaryFromReader);
      msg.setStreamSettings(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReceiveOriginalDestination(value);
      break;
    case 7:
      var value = /** @type {!Array.<!proto.v2ray.core.app.proxyman.KnownProtocols>} */ (reader.readPackedEnum());
      msg.setDomainOverrideList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.app.proxyman.ReceiverConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.app.proxyman.ReceiverConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortRange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      v2ray_com_core_common_net_port_pb.PortRange.serializeBinaryToWriter
    );
  }
  f = message.getListen();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      v2ray_com_core_common_net_address_pb.IPOrDomain.serializeBinaryToWriter
    );
  }
  f = message.getAllocationStrategy();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v2ray.core.app.proxyman.AllocationStrategy.serializeBinaryToWriter
    );
  }
  f = message.getStreamSettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      v2ray_com_core_transport_internet_config_pb.StreamConfig.serializeBinaryToWriter
    );
  }
  f = message.getReceiveOriginalDestination();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getDomainOverrideList();
  if (f.length > 0) {
    writer.writePackedEnum(
      7,
      f
    );
  }
};


/**
 * optional v2ray.core.common.net.PortRange port_range = 1;
 * @return {?proto.v2ray.core.common.net.PortRange}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.getPortRange = function() {
  return /** @type{?proto.v2ray.core.common.net.PortRange} */ (
    jspb.Message.getWrapperField(this, v2ray_com_core_common_net_port_pb.PortRange, 1));
};


/** @param {?proto.v2ray.core.common.net.PortRange|undefined} value */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.setPortRange = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.clearPortRange = function() {
  this.setPortRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.hasPortRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional v2ray.core.common.net.IPOrDomain listen = 2;
 * @return {?proto.v2ray.core.common.net.IPOrDomain}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.getListen = function() {
  return /** @type{?proto.v2ray.core.common.net.IPOrDomain} */ (
    jspb.Message.getWrapperField(this, v2ray_com_core_common_net_address_pb.IPOrDomain, 2));
};


/** @param {?proto.v2ray.core.common.net.IPOrDomain|undefined} value */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.setListen = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.clearListen = function() {
  this.setListen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.hasListen = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AllocationStrategy allocation_strategy = 3;
 * @return {?proto.v2ray.core.app.proxyman.AllocationStrategy}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.getAllocationStrategy = function() {
  return /** @type{?proto.v2ray.core.app.proxyman.AllocationStrategy} */ (
    jspb.Message.getWrapperField(this, proto.v2ray.core.app.proxyman.AllocationStrategy, 3));
};


/** @param {?proto.v2ray.core.app.proxyman.AllocationStrategy|undefined} value */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.setAllocationStrategy = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.clearAllocationStrategy = function() {
  this.setAllocationStrategy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.hasAllocationStrategy = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional v2ray.core.transport.internet.StreamConfig stream_settings = 4;
 * @return {?proto.v2ray.core.transport.internet.StreamConfig}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.getStreamSettings = function() {
  return /** @type{?proto.v2ray.core.transport.internet.StreamConfig} */ (
    jspb.Message.getWrapperField(this, v2ray_com_core_transport_internet_config_pb.StreamConfig, 4));
};


/** @param {?proto.v2ray.core.transport.internet.StreamConfig|undefined} value */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.setStreamSettings = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.clearStreamSettings = function() {
  this.setStreamSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.hasStreamSettings = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool receive_original_destination = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.getReceiveOriginalDestination = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.setReceiveOriginalDestination = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated KnownProtocols domain_override = 7;
 * @return {!Array.<!proto.v2ray.core.app.proxyman.KnownProtocols>}
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.getDomainOverrideList = function() {
  return /** @type {!Array.<!proto.v2ray.core.app.proxyman.KnownProtocols>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array.<!proto.v2ray.core.app.proxyman.KnownProtocols>} value */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.setDomainOverrideList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!proto.v2ray.core.app.proxyman.KnownProtocols} value
 * @param {number=} opt_index
 */
proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.addDomainOverride = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.v2ray.core.app.proxyman.ReceiverConfig.prototype.clearDomainOverrideList = function() {
  this.setDomainOverrideList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v2ray.core.app.proxyman.InboundHandlerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.app.proxyman.InboundHandlerConfig.displayName = 'proto.v2ray.core.app.proxyman.InboundHandlerConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.app.proxyman.InboundHandlerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.app.proxyman.InboundHandlerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: jspb.Message.getFieldWithDefault(msg, 1, ""),
    receiverSettings: (f = msg.getReceiverSettings()) && v2ray_com_core_common_serial_typed_message_pb.TypedMessage.toObject(includeInstance, f),
    proxySettings: (f = msg.getProxySettings()) && v2ray_com_core_common_serial_typed_message_pb.TypedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.app.proxyman.InboundHandlerConfig}
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.app.proxyman.InboundHandlerConfig;
  return proto.v2ray.core.app.proxyman.InboundHandlerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.app.proxyman.InboundHandlerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.app.proxyman.InboundHandlerConfig}
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 2:
      var value = new v2ray_com_core_common_serial_typed_message_pb.TypedMessage;
      reader.readMessage(value,v2ray_com_core_common_serial_typed_message_pb.TypedMessage.deserializeBinaryFromReader);
      msg.setReceiverSettings(value);
      break;
    case 3:
      var value = new v2ray_com_core_common_serial_typed_message_pb.TypedMessage;
      reader.readMessage(value,v2ray_com_core_common_serial_typed_message_pb.TypedMessage.deserializeBinaryFromReader);
      msg.setProxySettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.app.proxyman.InboundHandlerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.app.proxyman.InboundHandlerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReceiverSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      v2ray_com_core_common_serial_typed_message_pb.TypedMessage.serializeBinaryToWriter
    );
  }
  f = message.getProxySettings();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      v2ray_com_core_common_serial_typed_message_pb.TypedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.setTag = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional v2ray.core.common.serial.TypedMessage receiver_settings = 2;
 * @return {?proto.v2ray.core.common.serial.TypedMessage}
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.getReceiverSettings = function() {
  return /** @type{?proto.v2ray.core.common.serial.TypedMessage} */ (
    jspb.Message.getWrapperField(this, v2ray_com_core_common_serial_typed_message_pb.TypedMessage, 2));
};


/** @param {?proto.v2ray.core.common.serial.TypedMessage|undefined} value */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.setReceiverSettings = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.clearReceiverSettings = function() {
  this.setReceiverSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.hasReceiverSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional v2ray.core.common.serial.TypedMessage proxy_settings = 3;
 * @return {?proto.v2ray.core.common.serial.TypedMessage}
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.getProxySettings = function() {
  return /** @type{?proto.v2ray.core.common.serial.TypedMessage} */ (
    jspb.Message.getWrapperField(this, v2ray_com_core_common_serial_typed_message_pb.TypedMessage, 3));
};


/** @param {?proto.v2ray.core.common.serial.TypedMessage|undefined} value */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.setProxySettings = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.clearProxySettings = function() {
  this.setProxySettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.InboundHandlerConfig.prototype.hasProxySettings = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.app.proxyman.OutboundConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v2ray.core.app.proxyman.OutboundConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.app.proxyman.OutboundConfig.displayName = 'proto.v2ray.core.app.proxyman.OutboundConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.app.proxyman.OutboundConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.app.proxyman.OutboundConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.app.proxyman.OutboundConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.OutboundConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.app.proxyman.OutboundConfig}
 */
proto.v2ray.core.app.proxyman.OutboundConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.app.proxyman.OutboundConfig;
  return proto.v2ray.core.app.proxyman.OutboundConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.app.proxyman.OutboundConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.app.proxyman.OutboundConfig}
 */
proto.v2ray.core.app.proxyman.OutboundConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.app.proxyman.OutboundConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.app.proxyman.OutboundConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.app.proxyman.OutboundConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.OutboundConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.app.proxyman.SenderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v2ray.core.app.proxyman.SenderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.app.proxyman.SenderConfig.displayName = 'proto.v2ray.core.app.proxyman.SenderConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.app.proxyman.SenderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.app.proxyman.SenderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.SenderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    via: (f = msg.getVia()) && v2ray_com_core_common_net_address_pb.IPOrDomain.toObject(includeInstance, f),
    streamSettings: (f = msg.getStreamSettings()) && v2ray_com_core_transport_internet_config_pb.StreamConfig.toObject(includeInstance, f),
    proxySettings: (f = msg.getProxySettings()) && v2ray_com_core_transport_internet_config_pb.ProxyConfig.toObject(includeInstance, f),
    multiplexSettings: (f = msg.getMultiplexSettings()) && proto.v2ray.core.app.proxyman.MultiplexingConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.app.proxyman.SenderConfig}
 */
proto.v2ray.core.app.proxyman.SenderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.app.proxyman.SenderConfig;
  return proto.v2ray.core.app.proxyman.SenderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.app.proxyman.SenderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.app.proxyman.SenderConfig}
 */
proto.v2ray.core.app.proxyman.SenderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new v2ray_com_core_common_net_address_pb.IPOrDomain;
      reader.readMessage(value,v2ray_com_core_common_net_address_pb.IPOrDomain.deserializeBinaryFromReader);
      msg.setVia(value);
      break;
    case 2:
      var value = new v2ray_com_core_transport_internet_config_pb.StreamConfig;
      reader.readMessage(value,v2ray_com_core_transport_internet_config_pb.StreamConfig.deserializeBinaryFromReader);
      msg.setStreamSettings(value);
      break;
    case 3:
      var value = new v2ray_com_core_transport_internet_config_pb.ProxyConfig;
      reader.readMessage(value,v2ray_com_core_transport_internet_config_pb.ProxyConfig.deserializeBinaryFromReader);
      msg.setProxySettings(value);
      break;
    case 4:
      var value = new proto.v2ray.core.app.proxyman.MultiplexingConfig;
      reader.readMessage(value,proto.v2ray.core.app.proxyman.MultiplexingConfig.deserializeBinaryFromReader);
      msg.setMultiplexSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.app.proxyman.SenderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.app.proxyman.SenderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.SenderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVia();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      v2ray_com_core_common_net_address_pb.IPOrDomain.serializeBinaryToWriter
    );
  }
  f = message.getStreamSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      v2ray_com_core_transport_internet_config_pb.StreamConfig.serializeBinaryToWriter
    );
  }
  f = message.getProxySettings();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      v2ray_com_core_transport_internet_config_pb.ProxyConfig.serializeBinaryToWriter
    );
  }
  f = message.getMultiplexSettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.v2ray.core.app.proxyman.MultiplexingConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional v2ray.core.common.net.IPOrDomain via = 1;
 * @return {?proto.v2ray.core.common.net.IPOrDomain}
 */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.getVia = function() {
  return /** @type{?proto.v2ray.core.common.net.IPOrDomain} */ (
    jspb.Message.getWrapperField(this, v2ray_com_core_common_net_address_pb.IPOrDomain, 1));
};


/** @param {?proto.v2ray.core.common.net.IPOrDomain|undefined} value */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.setVia = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.v2ray.core.app.proxyman.SenderConfig.prototype.clearVia = function() {
  this.setVia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.hasVia = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional v2ray.core.transport.internet.StreamConfig stream_settings = 2;
 * @return {?proto.v2ray.core.transport.internet.StreamConfig}
 */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.getStreamSettings = function() {
  return /** @type{?proto.v2ray.core.transport.internet.StreamConfig} */ (
    jspb.Message.getWrapperField(this, v2ray_com_core_transport_internet_config_pb.StreamConfig, 2));
};


/** @param {?proto.v2ray.core.transport.internet.StreamConfig|undefined} value */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.setStreamSettings = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.v2ray.core.app.proxyman.SenderConfig.prototype.clearStreamSettings = function() {
  this.setStreamSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.hasStreamSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional v2ray.core.transport.internet.ProxyConfig proxy_settings = 3;
 * @return {?proto.v2ray.core.transport.internet.ProxyConfig}
 */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.getProxySettings = function() {
  return /** @type{?proto.v2ray.core.transport.internet.ProxyConfig} */ (
    jspb.Message.getWrapperField(this, v2ray_com_core_transport_internet_config_pb.ProxyConfig, 3));
};


/** @param {?proto.v2ray.core.transport.internet.ProxyConfig|undefined} value */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.setProxySettings = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.v2ray.core.app.proxyman.SenderConfig.prototype.clearProxySettings = function() {
  this.setProxySettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.hasProxySettings = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MultiplexingConfig multiplex_settings = 4;
 * @return {?proto.v2ray.core.app.proxyman.MultiplexingConfig}
 */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.getMultiplexSettings = function() {
  return /** @type{?proto.v2ray.core.app.proxyman.MultiplexingConfig} */ (
    jspb.Message.getWrapperField(this, proto.v2ray.core.app.proxyman.MultiplexingConfig, 4));
};


/** @param {?proto.v2ray.core.app.proxyman.MultiplexingConfig|undefined} value */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.setMultiplexSettings = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.v2ray.core.app.proxyman.SenderConfig.prototype.clearMultiplexSettings = function() {
  this.setMultiplexSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.app.proxyman.SenderConfig.prototype.hasMultiplexSettings = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.app.proxyman.MultiplexingConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v2ray.core.app.proxyman.MultiplexingConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.app.proxyman.MultiplexingConfig.displayName = 'proto.v2ray.core.app.proxyman.MultiplexingConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.app.proxyman.MultiplexingConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.app.proxyman.MultiplexingConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.app.proxyman.MultiplexingConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.MultiplexingConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, false),
    concurrency: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.app.proxyman.MultiplexingConfig}
 */
proto.v2ray.core.app.proxyman.MultiplexingConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.app.proxyman.MultiplexingConfig;
  return proto.v2ray.core.app.proxyman.MultiplexingConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.app.proxyman.MultiplexingConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.app.proxyman.MultiplexingConfig}
 */
proto.v2ray.core.app.proxyman.MultiplexingConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConcurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.app.proxyman.MultiplexingConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.app.proxyman.MultiplexingConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.app.proxyman.MultiplexingConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.app.proxyman.MultiplexingConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getConcurrency();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.v2ray.core.app.proxyman.MultiplexingConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.v2ray.core.app.proxyman.MultiplexingConfig.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 concurrency = 2;
 * @return {number}
 */
proto.v2ray.core.app.proxyman.MultiplexingConfig.prototype.getConcurrency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v2ray.core.app.proxyman.MultiplexingConfig.prototype.setConcurrency = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.v2ray.core.app.proxyman.KnownProtocols = {
  HTTP: 0,
  TLS: 1
};

goog.object.extend(exports, proto.v2ray.core.app.proxyman);
