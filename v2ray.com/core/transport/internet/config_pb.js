/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var v2ray_com_core_common_serial_typed_message_pb = require('../../../../v2ray.com/core/common/serial/typed_message_pb.js');
goog.exportSymbol('proto.v2ray.core.transport.internet.ProxyConfig', null, global);
goog.exportSymbol('proto.v2ray.core.transport.internet.StreamConfig', null, global);
goog.exportSymbol('proto.v2ray.core.transport.internet.TransportConfig', null, global);
goog.exportSymbol('proto.v2ray.core.transport.internet.TransportProtocol', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.transport.internet.TransportConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v2ray.core.transport.internet.TransportConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.transport.internet.TransportConfig.displayName = 'proto.v2ray.core.transport.internet.TransportConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.transport.internet.TransportConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.transport.internet.TransportConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.transport.internet.TransportConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.transport.internet.TransportConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocol: jspb.Message.getFieldWithDefault(msg, 1, 0),
    settings: (f = msg.getSettings()) && v2ray_com_core_common_serial_typed_message_pb.TypedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.transport.internet.TransportConfig}
 */
proto.v2ray.core.transport.internet.TransportConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.transport.internet.TransportConfig;
  return proto.v2ray.core.transport.internet.TransportConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.transport.internet.TransportConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.transport.internet.TransportConfig}
 */
proto.v2ray.core.transport.internet.TransportConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.v2ray.core.transport.internet.TransportProtocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 2:
      var value = new v2ray_com_core_common_serial_typed_message_pb.TypedMessage;
      reader.readMessage(value,v2ray_com_core_common_serial_typed_message_pb.TypedMessage.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.transport.internet.TransportConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.transport.internet.TransportConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.transport.internet.TransportConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.transport.internet.TransportConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      v2ray_com_core_common_serial_typed_message_pb.TypedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransportProtocol protocol = 1;
 * @return {!proto.v2ray.core.transport.internet.TransportProtocol}
 */
proto.v2ray.core.transport.internet.TransportConfig.prototype.getProtocol = function() {
  return /** @type {!proto.v2ray.core.transport.internet.TransportProtocol} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.v2ray.core.transport.internet.TransportProtocol} value */
proto.v2ray.core.transport.internet.TransportConfig.prototype.setProtocol = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional v2ray.core.common.serial.TypedMessage settings = 2;
 * @return {?proto.v2ray.core.common.serial.TypedMessage}
 */
proto.v2ray.core.transport.internet.TransportConfig.prototype.getSettings = function() {
  return /** @type{?proto.v2ray.core.common.serial.TypedMessage} */ (
    jspb.Message.getWrapperField(this, v2ray_com_core_common_serial_typed_message_pb.TypedMessage, 2));
};


/** @param {?proto.v2ray.core.common.serial.TypedMessage|undefined} value */
proto.v2ray.core.transport.internet.TransportConfig.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.v2ray.core.transport.internet.TransportConfig.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v2ray.core.transport.internet.TransportConfig.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.transport.internet.StreamConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v2ray.core.transport.internet.StreamConfig.repeatedFields_, null);
};
goog.inherits(proto.v2ray.core.transport.internet.StreamConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.transport.internet.StreamConfig.displayName = 'proto.v2ray.core.transport.internet.StreamConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v2ray.core.transport.internet.StreamConfig.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.transport.internet.StreamConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.transport.internet.StreamConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.transport.internet.StreamConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.transport.internet.StreamConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocol: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transportSettingsList: jspb.Message.toObjectList(msg.getTransportSettingsList(),
    proto.v2ray.core.transport.internet.TransportConfig.toObject, includeInstance),
    securityType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    securitySettingsList: jspb.Message.toObjectList(msg.getSecuritySettingsList(),
    v2ray_com_core_common_serial_typed_message_pb.TypedMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.transport.internet.StreamConfig}
 */
proto.v2ray.core.transport.internet.StreamConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.transport.internet.StreamConfig;
  return proto.v2ray.core.transport.internet.StreamConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.transport.internet.StreamConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.transport.internet.StreamConfig}
 */
proto.v2ray.core.transport.internet.StreamConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.v2ray.core.transport.internet.TransportProtocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 2:
      var value = new proto.v2ray.core.transport.internet.TransportConfig;
      reader.readMessage(value,proto.v2ray.core.transport.internet.TransportConfig.deserializeBinaryFromReader);
      msg.addTransportSettings(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecurityType(value);
      break;
    case 4:
      var value = new v2ray_com_core_common_serial_typed_message_pb.TypedMessage;
      reader.readMessage(value,v2ray_com_core_common_serial_typed_message_pb.TypedMessage.deserializeBinaryFromReader);
      msg.addSecuritySettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.transport.internet.StreamConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.transport.internet.StreamConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.transport.internet.StreamConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.transport.internet.StreamConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTransportSettingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.v2ray.core.transport.internet.TransportConfig.serializeBinaryToWriter
    );
  }
  f = message.getSecurityType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSecuritySettingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      v2ray_com_core_common_serial_typed_message_pb.TypedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransportProtocol protocol = 1;
 * @return {!proto.v2ray.core.transport.internet.TransportProtocol}
 */
proto.v2ray.core.transport.internet.StreamConfig.prototype.getProtocol = function() {
  return /** @type {!proto.v2ray.core.transport.internet.TransportProtocol} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.v2ray.core.transport.internet.TransportProtocol} value */
proto.v2ray.core.transport.internet.StreamConfig.prototype.setProtocol = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated TransportConfig transport_settings = 2;
 * @return {!Array.<!proto.v2ray.core.transport.internet.TransportConfig>}
 */
proto.v2ray.core.transport.internet.StreamConfig.prototype.getTransportSettingsList = function() {
  return /** @type{!Array.<!proto.v2ray.core.transport.internet.TransportConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v2ray.core.transport.internet.TransportConfig, 2));
};


/** @param {!Array.<!proto.v2ray.core.transport.internet.TransportConfig>} value */
proto.v2ray.core.transport.internet.StreamConfig.prototype.setTransportSettingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.v2ray.core.transport.internet.TransportConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v2ray.core.transport.internet.TransportConfig}
 */
proto.v2ray.core.transport.internet.StreamConfig.prototype.addTransportSettings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.v2ray.core.transport.internet.TransportConfig, opt_index);
};


proto.v2ray.core.transport.internet.StreamConfig.prototype.clearTransportSettingsList = function() {
  this.setTransportSettingsList([]);
};


/**
 * optional string security_type = 3;
 * @return {string}
 */
proto.v2ray.core.transport.internet.StreamConfig.prototype.getSecurityType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.v2ray.core.transport.internet.StreamConfig.prototype.setSecurityType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated v2ray.core.common.serial.TypedMessage security_settings = 4;
 * @return {!Array.<!proto.v2ray.core.common.serial.TypedMessage>}
 */
proto.v2ray.core.transport.internet.StreamConfig.prototype.getSecuritySettingsList = function() {
  return /** @type{!Array.<!proto.v2ray.core.common.serial.TypedMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, v2ray_com_core_common_serial_typed_message_pb.TypedMessage, 4));
};


/** @param {!Array.<!proto.v2ray.core.common.serial.TypedMessage>} value */
proto.v2ray.core.transport.internet.StreamConfig.prototype.setSecuritySettingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.v2ray.core.common.serial.TypedMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v2ray.core.common.serial.TypedMessage}
 */
proto.v2ray.core.transport.internet.StreamConfig.prototype.addSecuritySettings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.v2ray.core.common.serial.TypedMessage, opt_index);
};


proto.v2ray.core.transport.internet.StreamConfig.prototype.clearSecuritySettingsList = function() {
  this.setSecuritySettingsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v2ray.core.transport.internet.ProxyConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v2ray.core.transport.internet.ProxyConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v2ray.core.transport.internet.ProxyConfig.displayName = 'proto.v2ray.core.transport.internet.ProxyConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v2ray.core.transport.internet.ProxyConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.v2ray.core.transport.internet.ProxyConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v2ray.core.transport.internet.ProxyConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.transport.internet.ProxyConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v2ray.core.transport.internet.ProxyConfig}
 */
proto.v2ray.core.transport.internet.ProxyConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v2ray.core.transport.internet.ProxyConfig;
  return proto.v2ray.core.transport.internet.ProxyConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v2ray.core.transport.internet.ProxyConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v2ray.core.transport.internet.ProxyConfig}
 */
proto.v2ray.core.transport.internet.ProxyConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v2ray.core.transport.internet.ProxyConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v2ray.core.transport.internet.ProxyConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v2ray.core.transport.internet.ProxyConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v2ray.core.transport.internet.ProxyConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tag = 1;
 * @return {string}
 */
proto.v2ray.core.transport.internet.ProxyConfig.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v2ray.core.transport.internet.ProxyConfig.prototype.setTag = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.v2ray.core.transport.internet.TransportProtocol = {
  TCP: 0,
  UDP: 1,
  MKCP: 2,
  WEBSOCKET: 3,
  HTTP: 4,
  DOMAINSOCKET: 5
};

goog.object.extend(exports, proto.v2ray.core.transport.internet);
